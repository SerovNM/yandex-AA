/**
 * В непустом массиве целых чисел nums каждый элемент встречается дважды, кроме одного. Найдите этот единственный элемент.
 *
 * Вы должны реализовать решение с линейной сложностью во времени выполнения и использовать только постоянное дополнительное пространство.
 *
 *
 * Пример 1:
 *
 * Вход: nums = [2,2,1]
 * Выход: 1
 * Пример 2:
 *
 * Вход: nums = [4,1,2,1,2]
 * Выход: 4
 * Пример 3:
 *
 * Вход: nums = [1]
 * Выход: 1
 */

//Это решение за O(n)

var singleNumber = function(nums) {
    let map = new Map();
    for(let i=0; i<nums.length; i++){
        if(map.has(nums[i])){
            map.set(nums[i], map.get(nums[i])+1)
        } else{
            map.set(nums[i],1)
        }
    }
    for(let [key,value] of map){
        if(value===1) return key
    }

};


//Решение за O(1)

var singleNumber2 = function(nums) {
    let result = 0; // Инициализируем переменную result равной 0
    for (let num of nums) { // Проходим по всем элементам массива nums
        //После завершения цикла в переменной result останется только значение единственного числа,
        // которое встречается один раз, так как все парные числа аннулируются операцией XOR.
        result ^= num; // Применяем операцию XOR между текущим значением result и текущим элементом num
    }
    return result; // Возвращаем результат, содержащий единственное число, встречающееся только один раз
};

/**
 * Ваше решение имеет линейную сложность во времени выполнения,
 * так как вы проходите по массиву nums только один раз.
 * Вы также используете только постоянное дополнительное пространство,
 * так как ваша хэш-таблица имеет размер, который зависит только от
 * количества уникальных элементов в массиве, а не от размера самого массива.
 */
