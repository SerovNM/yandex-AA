/*
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 */


function generateParenthesis(n) {
    // Создаем массив для хранения всех возможных комбинаций скобок.
    const result = [];

    // Вызываем вспомогательную функцию для генерации комбинаций скобок.
    generate('', n, 0, 0, result);

    // Возвращаем массив сгенерированных комбинаций.
    return result;
}

// Вспомогательная функция для генерации комбинаций скобок.
function generate(
    str,    // Текущая строка скобок.
    max,    // Максимальное количество скобок.
    open,   // Текущее количество открытых скобок.
    close,  // Текущее количество закрытых скобок.
    result  // Массив для хранения результатов.
) {
    // Если количество открытых и закрытых скобок равно максимальному количеству,
    // добавляем текущую строку в массив результатов и завершаем выполнение.
    if (open === max && close === max) {
        result.push(str);
        return;
    }

    // Если количество открытых скобок меньше максимального,
    // добавляем открывающую скобку и рекурсивно вызываем функцию generate.
    if (open < max) {
        generate(str + '(', max, open + 1, close, result);
    }

    // Если количество закрытых скобок меньше количества открытых,
    // добавляем закрывающую скобку и рекурсивно вызываем функцию generate.
    if (close < open) {
        generate(str + ')', max, open, close + 1, result);
    }
}
