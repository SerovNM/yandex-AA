/*
В этой задаче вы получаете целочисленный массив nums и целое число k.
Существует скользящее окно размером k, которое движется с самого левого края
массива до самого правого. Вы видите только k чисел в окне.
 Каждый раз, когда скользящее окно сдвигается вправо на одну позицию,
  вам нужно вернуть медиану массива для каждого окна в исходном массиве.

Медиана - это среднее значение двух средних значений в упорядоченном целочисленном списке.
 Если размер списка четный, среднего значения нет. Таким образом, медиана - это среднее из двух средних значений.

В этой задаче вам нужно возвращать массив медиан для каждого окна в исходном массиве.
Важно понимать, что медиана каждого окна зависит от порядка чисел в этом окне, поскольку
 она вычисляется на основе отсортированных значений окна.


 Основная концепция решения заключается в использовании скользящего окна переменного
 размера для вычисления медианы. Мы поддерживаем окно в виде отсортированного массива,
  чтобы быстро получать медиану. При каждом сдвиге окна мы вставляем новый элемент,
  а при выходе старый элемент удаляем из окна. Затем мы вычисляем медиану
   текущего окна и добавляем ее в результат. Этот процесс повторяется до конца массива nums.
 */



var medianSlidingWindow = function(nums, k) {
    const result = [];
    const window = [];

    const insert = (num) => { // Вставка элемента в отсортированное окно
        let left = 0, right = window.length;
        while (left < right) {
            const mid = (left + right) >> 1;
            if (window[mid] <= num) left = mid + 1;
            else right = mid;
        }
        window.splice(left, 0, num);
    };

    const remove = (num) => { // Удаление элемента из окна
        const index = window.indexOf(num);
        window.splice(index, 1);
    };

    const getMedian = () => { // Получение медианы из текущего окна
        const mid = window.length >> 1;
        return window.length % 2 !== 0 ? window[mid] : (window[mid] + window[mid - 1]) / 2;
    };

    nums.forEach((num, i) => { // Проход по всем элементам nums
        if (i >= k) { // Если окно достигло размера k
            result.push(getMedian()); // Добавляем медиану текущего окна в результат
            remove(nums[i - k]); // Удаляем первый элемент из текущего окна
        }
        insert(num); // Вставляем новый элемент в текущее окно
    });
    result.push(getMedian()); // Добавляем медиану последнего окна в результат
    return result;
};
