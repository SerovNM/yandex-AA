/*
Вам дана строка s. Мы хотим разбить строку на как можно большее количество частей, чтобы каждая буква встречалась не более чем в одной части.

Обратите внимание, что разбиение производится таким образом, чтобы после конкатенации всех частей по порядку получилась строка s.

Возвращает список целых чисел, представляющих размер этих частей.



Пример 1:

Вход: s = "ababcbacacadefegdehijhklij"
Выходные данные: [9,7,8]
Пояснения:
Разбиение: "ababcbaca", "defegde", "hijhklij".
Это такое разбиение, что каждая буква встречается не более чем в одной части.
Разбиение типа "ababcbacadefegde", "hijhklij" является неправильным, так как разбивает s на меньшее количество частей.
Пример 2:

Вход: s = "eccbbbbdec"
Выход: [10]

 */

var partitionLabels = function (s, lastIndexes = {}) {
    // Создаем объект lastIndexes, где ключами будут символы строки s,
    // а значениями — индексы их последних вхождений в строке.
    for (let i = 0; i < s.length; i++) {
        lastIndexes[s[i]] = i;
    }

    let currentLastIndex = 0, // Индекс последней встреченной буквы в текущей части
        partitionSizes = [], // Массив для хранения размеров частей
        accumulatedIndex = 0; // Накопленный индекс, используется для вычисления размера части

    // Проходим по строке s.
    for (let i = 0; i < s.length; i++) {
        // Обновляем currentLastIndex, выбирая максимальное значение между текущим currentLastIndex
        // и последним индексом текущего символа из lastIndexes.
        currentLastIndex = Math.max(currentLastIndex, lastIndexes[s[i]]);

        // Если достигнут последний индекс текущего символа в части,
        // добавляем размер текущей части в массив partitionSizes и обновляем accumulatedIndex.
        if (i === currentLastIndex) {
            partitionSizes.push(i + 1 - accumulatedIndex);
            accumulatedIndex = i + 1;
        }
    }

    // Возвращаем массив размеров частей.
    return partitionSizes;
};
console.log(partitionLabels("ababcbacadefegdehijhklij"))

/*
Это решение использует подход "жадного" алгоритма для нахождения оптимального разбиения строки на части
 */
